COMPILER Tastier

   const int // object kinds
      var = 0, proc = 1, constant = 3;

   const int // types
      undef = 0, integer = 1, boolean = 2;

   const int // sort
       scalar = 1, array = 2;   

   public SymbolTable tab;
   public CodeGenerator gen;


   // create space for parameters on the stack
   public void padStack(int paramCount){
      int bytePadding = paramCount * 4;
      Console.WriteLine("    ADD     TOP, TOP, #{0}      ; create space for parameters", bytePadding);
   }
 
   // place parameters on the stack
   public void addParamToStack(int paramNum){
      int offset = -(paramNum * 4);
      Console.WriteLine("    STR     R1, [TOP, #{0}]      ; add to stack", offset);
   }
  
/*-------------------------------------------------------------------------------------------*/

CHARACTERS

  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  digit = "0123456789".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  stringCh = ANY - '"' - '\\' - cr - lf - tab.
  printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS

  number = digit { digit }.
  ident = letter { letter | digit }.
  string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

Expr<out int reg,        // load value of Expr into register
     out int type>       (. int typeR, regR; Op op; .)
  = SimExpr<out reg,
            out type>
  [ RelOp<out op>
    SimExpr<out regR,
            out typeR>   (.
                            if (type == typeR) {
                               type = boolean;
                               gen.RelOp(op, reg, regR);
                            }
                            else SemErr("incompatible types");
                         .)
   ]                     (. gen.ClearRegisters(); .)
.

/*-------------------------------------------------------------------------------------------*/

Primary<out int reg,     // load Primary into register
        out int type>    (. int n; Obj obj; string name; .)
=                        (.
                            type = undef;
                            reg = gen.GetRegister();
                            int index = 0;
                         .)
  ( Ident<out name> 
    //check for array syntax, and get the index in the array
    [ 
    "["                   
        number          (.
                          index = Convert.ToInt32(t.val);
                          
                        .)             
    "]"
    ]  
    (.                                                 //array shit here as well
                            obj = tab.Find(name); type = obj.type;
                            //if the object is an array, check that the index is within bounds
                            if(obj.sort == array)
                              if(index > obj.size | index < 0)
                                SemErr("Error: array index out of bounds");
                            if (obj.kind == var || obj.kind == constant) {
                               if (obj.level == 0)
                                  gen.LoadGlobal(reg, obj.adr + index, name);
                               else
                                  gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
                               if (type == boolean)
                               // reset Z flag in CPSR
                                  gen.ResetZ(reg);
                            }
                            else SemErr("variable/constant expected");
                         .)

  | number               (.
                            type = integer;
                            n = Convert.ToInt32(t.val);
                            gen.LoadConstant(reg, n);
                         .)

  | '-'
    Primary<out reg,
            out type>     (.
                            if (type == integer)
                               gen.NegateValue(reg);
                            else SemErr("integer type expected");
                         .)

  | "true"               (.
                               type = boolean;
                               gen.LoadTrue(reg);
                         .)

  | "false"              (.
                               type = boolean;
                               gen.LoadFalse(reg);
                         .)

  | '('
    Expr<out reg,
         out type>
    ')'

  )
.

/*-------------------------------------------------------------------------------------------*/

Ident<out string name>
= ident                  (. name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
= string                  (. text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | ("div" | "DIV")      (. op = Op.DIV; .)
  | ("mod" | "MOD")      (. op = Op.MOD; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

ProcDecl<string progName>
                         (. Obj obj; string procName; .)
= "void"
  Ident<out procName>    (.
                            obj = tab.NewObj(procName, proc, undef, undef, -1, 0, 0);
                            if (procName == "main")
                               if (tab.curLevel == 0)
                                  tab.mainPresent = true;
                               else SemErr("main not at lexic level 0");
                            tab.OpenScope();
                         .)
    // recognize parameters and increment a parameter count
  '('                    (. int paramCount = 0; .)
      [
        ParamDecl<out paramCount>
      ]
  ')'                    (. obj.paramCount = paramCount; .)
  '{'
      {
        ValueCreation
      }
      {
         ProcDecl<progName>
      }                  (.
                            if (procName == "main")
                               gen.Label("Main", "Body");
                            else {
                               gen.ProcNameComment(procName);
                               gen.Label(procName, "Body");
                            }
                         .)
      Stat { Stat }
  '}'                    (.
                            if (procName == "main") {
                               gen.StopProgram(progName);
                               gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
                            } else {
                               gen.Return(procName);
                               gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
                            }
                            tab.CloseScope();
                         .)
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  | "!="                 (. op = Op.NEQ; .)
  | "<="                 (. op = Op.LEQ; .)
  | ">="                 (. op = Op.GEQ; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

SimExpr<out int reg,     //load value of SimExpr into register
        out int type>    (. int typeR, regR; Op op; .)
= Term<out reg,
       out type>
  { AddOp<out op>
    Term<out regR,
         out typeR>      (.
                            if (type == integer && typeR == integer)
                               gen.AddOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Stat                     (. int type; string name; Obj obj; int reg; int index = 0; .)
= Ident<out name>        (. obj = tab.Find(name); .) 
  //cehck for arrays and then the index to be accessed
  [
    "["                    
        number          (.
                          index = Convert.ToInt32(t.val);
                          if(index > obj.size | index < 0)
                            SemErr("Error: array index out of bounds");
                        .)                         
    "]"
  ]
  ( ":="                 (.
                            if (obj.kind == proc)
                               SemErr("cannot assign to procedure");
                            else if(obj.kind == constant) 
                               SemErr("cannot assign to constant");  
                         .)
    (                   
      Expr<out reg,
           out type>    (.
                              if (type == obj.type)
                                 if (obj.level == 0)
                                    gen.StoreGlobal(reg, obj.adr + index, name);
                                 else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
                                 obj.assigned = true;
                           .)
      //attempt to recognize syntax for conditional assigment
      //actual code generated is an if/else, but could not get recognition working
      //there was an LL1 conflict as both this and regular assignment started with Expr
      //adding '<' '>' around the condtion did not succeed
      |  '<' Expr<out reg, 
            out type> '>' "?"   (.
                             int l1, l2; l1 = 0;
                             int reg2, type2, reg3, type3; 
                            if (type == boolean) {
                              l1 = gen.NewLabel();
                              gen.BranchFalse(l1);      
                            }
                            else SemErr("boolean type expected");
                         .)
        Expr<out reg2, 
              out type2> ':'
                            (.
                              l2 = gen.NewLabel();
                              gen.Branch(l2);
                              gen.Label(l1);

                              if (type2 == obj.type)
                                   if (obj.level == 0)
                                      gen.StoreGlobal(reg2, obj.adr + index, name);
                                   else gen.StoreLocal(reg2, tab.curLevel-obj.level, obj.adr + index, name);
                                   obj.assigned = true;
                           .)

        Expr<out reg3, 
              out type3>     (. 
                                  if (type3 == obj.type)
                                    if (obj.level == 0)
                                      gen.StoreGlobal(reg3, obj.adr + index, name);
                                    else gen.StoreLocal(reg3, tab.curLevel-obj.level, obj.adr + index, name);
                                    obj.assigned = true;
                                  gen.Label(l2); 
                                .)                
    ) ';'
    //take paremeters in fucntion calling
    //the procedure object has a parameter count
    //pad the stack out by that amount, and then push each paremeter onto the stack
    //if the number of parameters does not equal the paramcount of the procedure, throws an error
  | '(' ')' ';'          (.
                            if (obj.kind == proc)
                               gen.Call(name); 
                            else SemErr("object is not a procedure");
                         .)


    |'('                      (.
                                if (obj.kind != proc)
                                   SemErr("object is not a procedure");
                              
                                string paramName; Obj param; int numParams = 0;
                              
                              .)
      [
        Ident<out paramName>   (.
                                padStack(obj.paramCount);
                                param = tab.Find(paramName);
                                numParams += 1;
                                gen.LoadLocalAddress(tab.curLevel-param.level, param.adr);
                                addParamToStack(numParams);
                              .)
        {
          "," Ident<out paramName>  (.
                                  param = tab.Find(paramName);
                                  numParams += 1;
                                  gen.LoadLocalAddress(tab.curLevel-param.level, param.adr);
                                  addParamToStack(numParams);
                                .)
        }
      ]                         (.
                                  if(numParams != obj.paramCount)
                                    SemErr("Error: incorrect number of parameters");
 
                              .)
    ')' ';'                   (.
                                  gen.Call(name);
                              .)
  )

| "if"                   (. int l1, l2; l1 = 0; .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l1 = gen.NewLabel();
                               gen.BranchFalse(l1);
                            }
                            else SemErr("boolean type expected");
                         .)
      Stat               (.
                            l2 = gen.NewLabel();
                            gen.Branch(l2);
                            gen.Label(l1);
                         .)
      [ "else"
      Stat
      ]               	 (. gen.Label(l2); .)

| "while"                (.
                            int l1, l2;
                            l1 = gen.NewLabel();
                            gen.Label(l1); l2=0;
                         .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l2 = gen.NewLabel();
                               gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                         .)
   Stat                  (.
                            gen.Branch(l1);
                            gen.Label(l2);
                         .)
  //switch on an expression
  // this provides a register in which the contioin is stored so we can compare to each case
  // each case acts basicaly as an if statement
  // optional break statements allow for leaving the switch statement from within a particular case
  // the default case if optional 
| "switch" "("            (. int breakLabel, switchReg;  breakLabel = 0;
                             breakLabel = gen.NewLabel();
                          .)
    Expr<out switchReg, out type>         
    ")"

    "{"
      {                     (.gen.GetRegister();.)
        "case" Expr<out reg,
       out type>  ":"      
                          (. int l1, l2; l1 = 0;      //stuff for recognizing cases
                            l1 = gen.NewLabel();
                            gen.RelOp(Op.EQU, reg, switchReg);
                            gen.BranchFalse(l1);
                          .) 
        Stat            
        [ "break" ";"      (.gen.Branch(breakLabel);.)

        ]
                        (. gen.Label(l1); 
                        .)
      }
      [
        "default" ":"
        Stat
      ]
    "}"                 (. gen.Label(breakLabel);
                        .)  
  // for loop implementation relies on the programmer not doing anything to out there in their loop initialization
  // for the conditon intitialization and update statements are expected. This can be expoited to break the code
  // I made this design decission because many languages allow for un-ideal things in for loops, and generally 
  // conventions are followed
| "for" "("

  Stat                (.
                            int loop, escape;
                            loop = gen.NewLabel();
                            gen.Label(loop); escape=0;
                      .)
  Expr<out reg,
    out type> ";"        (.
                            if (type == boolean) {
                                escape = gen.NewLabel();
                               gen.BranchFalse(escape);
                            }
                            else SemErr("boolean type expected");
                      .)
  Stat                    
    ")"
    "do" "{"
      Stat
    "}" 
                      (.
                            gen.Branch(loop);
                            gen.Label(escape);
                      .) 

  | "read"        (.  index = 0;.)
  Ident<out name>
    [
        "["                     
          number          (.
                            index = Convert.ToInt32(t.val);
                          .)
        "]"
    ]
   ';'    (.           
                            obj = tab.Find(name);
                            if (obj.type == integer) {
                               gen.ReadInteger(); 
                               if (obj.level == 0)
                                  gen.StoreGlobal(0, obj.adr + index, name);
                               else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr + index, name);
                            }
                            else SemErr("integer type expected");
                         .)

| "write"                (. string text; .)
  (
    Expr<out reg,
         out type>       (.
                            switch (type) {
                               case integer: gen.WriteInteger(reg, false);
                                             break; 
                               case boolean: gen.WriteBoolean(false);
                                             break;
                            }
                         .)
  | String<out text>     (. gen.WriteString(text); .)
  )
  ';'

| "writeln"
  // note - for strings use write with \n in text
  Expr<out reg,
       out type>           (.
                              switch (type) {
                                 case integer: gen.WriteInteger(reg, false);
                                               break;
                                 case boolean: gen.WriteBoolean(true);
                                               break;
                              }
                           .)
  ';'

| '{'
  { Stat | ValueCreation }
  '}'


.

/*-------------------------------------------------------------------------------------------*/

Tastier                  (. string pName; .)
  = "program"
  Ident<out pName>       (. tab.OpenScope(); .)
  '{'
    { ValueCreation }
    { ProcDecl<pName> }  (. tab.CloseScope(); .)
  '}'
.

/*-------------------------------------------------------------------------------------------*/

Term<out int reg,        // load value of Term into register
     out int type>       (. int typeR, regR; Op op; .)
  = Primary<out reg,
            out type>
  { MulOp<out op>
    Primary<out regR,
            out typeR>
                         (.
                            if (type == integer && typeR == integer)
                               gen.MulOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 )
.

/*-------------------------------------------------------------------------------------------*/
// a merge for variable, constant and array creation
// I created this for the constants assigment, and ended up with a large amount of code duplicated
// in order to support arrays. The array section is essentially  the same as the rest, just with support ofr '[' ']'
// constants are flags in the object that do no allow for re-assignment

ValueCreation                (. string name; int type; int kind = var; Obj obj; int reg; int sort = scalar; int size = 1;.)
= [
    "constant"                (. kind = constant; .)
  ]
 Type<out type>
  [
    "["                 (. sort = array; .)    
        number          (.
                          size = Convert.ToInt32(t.val);
                        .)
        //expect an identifier here                 
    "]"
  ]
 Ident<out name>      (. obj = tab.NewObj(name, kind, type, sort, size, 0, 0); .)
  (. if(obj.sort != array) {  .)  // only one array per line allowed, needs own syntax recognition for intialization    
   
    [
      ":="      
      Expr<out reg,
             out type>    (.
                                if (type == obj.type)
                                   if (obj.level == 0)
                                      gen.StoreGlobal(reg, obj.adr, name);
                                   else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                                   obj.assigned = true;
                             .)                
    ]  
    { ","
      Ident<out name>      (. obj = tab.NewObj(name, kind, type, scalar, 1, 0, 0); .)  // only allowed set up one array in a single statement, so default scalar and size of 1 values passed
      [
        ":="                
        Expr<out reg,
             out type>    (.
                                if (type == obj.type)
                                   if (obj.level == 0)
                                      gen.StoreGlobal(reg, obj.adr, name);
                                   else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                                   obj.assigned = true;
                             .)
      ]                  
    }
    ";"   
  (. }else{   int index = 0; int n; .)
    
    ":="
    "["  
      Expr<out reg, out type>      (.
                          if (type == obj.type)
                             if (obj.level == 0)
                                gen.StoreGlobal(reg, obj.adr + index, name);
                             else
                                gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
                        index++;
                    .)
      { ","
            (. if(index > size -1)
                 SemErr("Array index out of bounds");   .)
        Expr<out reg, out type> (.
                        if (type == obj.type)
                           if (obj.level == 0)
                              gen.StoreGlobal(reg, obj.adr + index, name);
                           else
                              gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
                      index++;
                    .)
      }
    "]"
    ";"
  (. } .)
.

/*-------------------------------------------------------------------------------------------*/
// declare parameters for a procedure
// creates a local version of an object for a procedure to use, using the address of the object 
// which it is the local version of.
 
ParamDecl<out int paramCount>  (. int type; string name; int sort = scalar; int maxIndex = -1; int paramAdr = -5; paramCount = 0; .)
= Type<out type>
  [
    "["                           (. sort = array; .)
        number                    (.
                                     maxIndex = Convert.ToInt32(t.val) - 1;
                                  .)
    "]"
  ]
  Ident<out name>                 (.
                                    tab.NewObj(name, var, type,sort, maxIndex, paramAdr, 0);
                                    paramAdr -= 1;
                                    paramCount += 1; 
                                  .)
  { ","
    Type<out type>
    [
      "["                           (. sort = array; paramCount = 0; .)
          number                    (.
                                       maxIndex = Convert.ToInt32(t.val) - 1;
                                    .)
      "]"
    ]
    Ident<out name>                 (.
                                      tab.NewObj(name, var, type,sort, maxIndex, paramAdr, 0);
                                      paramAdr -= 1;
                                      paramCount += 1;
                                    .)
  }
.
END Tastier.