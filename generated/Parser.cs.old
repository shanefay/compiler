/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

using System;

namespace Tastier {



public class Parser {
	public const int _EOF = 0;
	public const int _number = 1;
	public const int _ident = 2;
	public const int _string = 3;
	public const int maxT = 47;

	const bool T = true;
	const bool x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

const int // object kinds
      var = 0, proc = 1, constant = 3;

   const int // types
      undef = 0, integer = 1, boolean = 2;

   const int // sort
       scalar = 1, array = 2;   

   public SymbolTable tab;
   public CodeGenerator gen;


   // create space for parameters on the stack
   public void padStack(int paramCount){
      int bytePadding = paramCount * 4;
      Console.WriteLine("    ADD     TOP, TOP, #{0}      ; create space for parameters", bytePadding);
   }
 
   // place parameters on the stack
   public void addParamToStack(int paramNum){
      int offset = -(paramNum * 4);
      Console.WriteLine("    STR     R1, [TOP, #{0}]      ; add to stack", offset);
   }
  
/*-------------------------------------------------------------------------------------------*/



	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	bool StartOf (int s) {
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
	void AddOp(out Op op) {
		op = Op.ADD; 
		if (la.kind == 4) {
			Get();
		} else if (la.kind == 5) {
			Get();
			op = Op.SUB; 
		} else SynErr(48);
	}

	void Expr(out int reg,        // load value of Expr into register
out int type) {
		int typeR, regR; Op op; 
		SimExpr(out reg,
out type);
		if (StartOf(1)) {
			RelOp(out op);
			SimExpr(out regR,
out typeR);
			if (type == typeR) {
			  type = boolean;
			  gen.RelOp(op, reg, regR);
			}
			else SemErr("incompatible types");
			
		}
		gen.ClearRegisters(); 
	}

	void SimExpr(out int reg,     //load value of SimExpr into register
out int type) {
		int typeR, regR; Op op; 
		Term(out reg,
out type);
		while (la.kind == 4 || la.kind == 5) {
			AddOp(out op);
			Term(out regR,
out typeR);
			if (type == integer && typeR == integer)
			  gen.AddOp(op, reg, regR);
			else SemErr("integer type expected");
			
		}
	}

	void RelOp(out Op op) {
		op = Op.EQU; 
		switch (la.kind) {
		case 20: {
			Get();
			break;
		}
		case 21: {
			Get();
			op = Op.LSS; 
			break;
		}
		case 22: {
			Get();
			op = Op.GTR; 
			break;
		}
		case 23: {
			Get();
			op = Op.NEQ; 
			break;
		}
		case 24: {
			Get();
			op = Op.LEQ; 
			break;
		}
		case 25: {
			Get();
			op = Op.GEQ; 
			break;
		}
		default: SynErr(49); break;
		}
	}

	void Primary(out int reg,     // load Primary into register
out int type) {
		int n; Obj obj; string name; 
		type = undef;
		reg = gen.GetRegister();
		int index = 0;
		
		switch (la.kind) {
		case 2: {
			Ident(out name);
			if (la.kind == 6) {
				Get();
				Expect(1);
				index = Convert.ToInt32(t.val);
				
				
				Expect(7);
			}
			obj = tab.Find(name); type = obj.type;
			if(obj.sort == array)
			 if(index > obj.size | index < 0)
			   SemErr("Error: array index out of bounds");
			if (obj.kind == var || obj.kind == constant) {
			  if (obj.level == 0)
			     gen.LoadGlobal(reg, obj.adr + index, name);
			  else
			     gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
			  if (type == boolean)
			  // reset Z flag in CPSR
			     gen.ResetZ(reg);
			}
			else SemErr("variable/constant expected");
			
			break;
		}
		case 1: {
			Get();
			type = integer;
			n = Convert.ToInt32(t.val);
			gen.LoadConstant(reg, n);
			
			break;
		}
		case 5: {
			Get();
			Primary(out reg,
out type);
			if (type == integer)
			  gen.NegateValue(reg);
			else SemErr("integer type expected");
			
			break;
		}
		case 8: {
			Get();
			type = boolean;
			gen.LoadTrue(reg);
			
			break;
		}
		case 9: {
			Get();
			type = boolean;
			gen.LoadFalse(reg);
			
			break;
		}
		case 10: {
			Get();
			Expr(out reg,
out type);
			Expect(11);
			break;
		}
		default: SynErr(50); break;
		}
	}

	void Ident(out string name) {
		Expect(2);
		name = t.val; 
	}

	void String(out string text) {
		Expect(3);
		text = t.val; 
	}

	void MulOp(out Op op) {
		op = Op.MUL; 
		if (la.kind == 12) {
			Get();
		} else if (la.kind == 13 || la.kind == 14) {
			if (la.kind == 13) {
				Get();
			} else {
				Get();
			}
			op = Op.DIV; 
		} else if (la.kind == 15 || la.kind == 16) {
			if (la.kind == 15) {
				Get();
			} else {
				Get();
			}
			op = Op.MOD; 
		} else SynErr(51);
	}

	void ProcDecl(string progName) {
		Obj obj; string procName; 
		Expect(17);
		Ident(out procName);
		obj = tab.NewObj(procName, proc, undef, undef, -1, 0, 0);
		if (procName == "main")
		  if (tab.curLevel == 0)
		     tab.mainPresent = true;
		  else SemErr("main not at lexic level 0");
		tab.OpenScope();
		
		Expect(10);
		int paramCount = 0; 
		if (la.kind == 44 || la.kind == 45) {
			ParamDecl(out paramCount);
		}
		Expect(11);
		obj.paramCount = paramCount; 
		Expect(18);
		while (la.kind == 44 || la.kind == 45 || la.kind == 46) {
			ValueCreation();
		}
		while (la.kind == 17) {
			ProcDecl(progName);
		}
		if (procName == "main")
		  gen.Label("Main", "Body");
		else {
		  gen.ProcNameComment(procName);
		  gen.Label(procName, "Body");
		}
		
		Stat();
		while (StartOf(2)) {
			Stat();
		}
		Expect(19);
		if (procName == "main") {
		  gen.StopProgram(progName);
		  gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
		} else {
		  gen.Return(procName);
		  gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
		}
		tab.CloseScope();
		
	}

	void ParamDecl(out int paramCount) {
		int type; string name; int sort = scalar; int maxIndex = -1; int paramAdr = -5; paramCount = 0; 
		Type(out type);
		if (la.kind == 6) {
			Get();
			sort = array; 
			Expect(1);
			maxIndex = Convert.ToInt32(t.val) - 1;
			
			Expect(7);
		}
		Ident(out name);
		tab.NewObj(name, var, type,sort, maxIndex, paramAdr, 0);
		paramAdr -= 1;
		paramCount += 1;
		
		while (la.kind == 30) {
			Get();
			Type(out type);
			if (la.kind == 6) {
				Get();
				sort = array; paramCount = 0; 
				Expect(1);
				maxIndex = Convert.ToInt32(t.val) - 1;
				
				Expect(7);
			}
			Ident(out name);
			tab.NewObj(name, var, type,sort, maxIndex, paramAdr, 0);
			paramAdr -= 1;
			paramCount += 1;
			
		}
	}

	void ValueCreation() {
		string name; int type; int kind = var; Obj obj; int reg; int sort = scalar; int size = 1;
		if (la.kind == 46) {
			Get();
			kind = constant; 
		}
		Type(out type);
		if (la.kind == 6) {
			Get();
			sort = array; 
			Expect(1);
			size = Convert.ToInt32(t.val);
			
			Expect(7);
		}
		Ident(out name);
		obj = tab.NewObj(name, kind, type, sort, size, 0, 0); 
		if(obj.sort != array) {  
		if (la.kind == 26) {
			Get();
			Expr(out reg,
 out type);
			if (type == obj.type)
			  if (obj.level == 0)
			     gen.StoreGlobal(reg, obj.adr, name);
			  else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
			  obj.assigned = true;
			
		}
		while (la.kind == 30) {
			Get();
			Ident(out name);
			obj = tab.NewObj(name, kind, type, scalar, 1, 0, 0); 
			if (la.kind == 26) {
				Get();
				Expr(out reg,
out type);
				if (type == obj.type)
				  if (obj.level == 0)
				     gen.StoreGlobal(reg, obj.adr, name);
				  else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
				  obj.assigned = true;
				
			}
		}
		Expect(29);
		}else{   int index = 0; int n; 
		Expect(26);
		Expect(6);
		Expr(out reg, out type);
		if (type == obj.type)
		  if (obj.level == 0)
		     gen.StoreGlobal(reg, obj.adr + index, name);
		  else
		     gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
		index++;
		
		while (la.kind == 30) {
			Get();
			if(index > size -1)
			 SemErr("Array index out of bounds");   
			Expr(out reg, out type);
			if (type == obj.type)
			  if (obj.level == 0)
			     gen.StoreGlobal(reg, obj.adr + index, name);
			  else
			     gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
			index++;
			
		}
		Expect(7);
		Expect(29);
		} 
	}

	void Stat() {
		int type; string name; Obj obj; int reg; int index = 0; 
		switch (la.kind) {
		case 2: {
			Ident(out name);
			obj = tab.Find(name); 
			if (la.kind == 6) {
				Get();
				Expect(1);
				index = Convert.ToInt32(t.val);
				if(index > obj.size | index < 0)
				 SemErr("Error: array index out of bouns");
				
				Expect(7);
			}
			if (la.kind == 26) {
				Get();
				if (obj.kind == proc)
				  SemErr("cannot assign to procedure");
				else if(obj.kind == constant) 
				  SemErr("cannot assign to constant");  
				
				if (StartOf(3)) {
					Expr(out reg,
out type);
					if (type == obj.type)
					  if (obj.level == 0)
					     gen.StoreGlobal(reg, obj.adr + index, name);
					  else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
					  obj.assigned = true;
					
				} else if (la.kind == 21) {
					Get();
					Expr(out reg, 
out type);
					Expect(22);
					Expect(27);
					int l1, l2; l1 = 0;
					int reg2, type2, reg3, type3; 
					if (type == boolean) {
					l1 = gen.NewLabel();
					gen.BranchFalse(l1);      
					}
					else SemErr("boolean type expected");
					
					Expr(out reg2, 
out type2);
					Expect(28);
					l2 = gen.NewLabel();
					gen.Branch(l2);
					gen.Label(l1);
					
					if (type2 == obj.type)
					    if (obj.level == 0)
					       gen.StoreGlobal(reg2, obj.adr + index, name);
					    else gen.StoreLocal(reg2, tab.curLevel-obj.level, obj.adr + index, name);
					    obj.assigned = true;
					
					Expr(out reg3, 
out type3);
					if (type3 == obj.type)
					 if (obj.level == 0)
					   gen.StoreGlobal(reg3, obj.adr + index, name);
					 else gen.StoreLocal(reg3, tab.curLevel-obj.level, obj.adr + index, name);
					 obj.assigned = true;
					gen.Label(l2); 
					
				} else SynErr(52);
				Expect(29);
			} else if (la.kind == 10) {
				Get();
				Expect(11);
				Expect(29);
				if (obj.kind == proc)
				  gen.Call(name); 
				else SemErr("object is not a procedure");
				
			} else if (la.kind == 10) {
				Get();
				if (obj.kind != proc)
				  SemErr("object is not a procedure");
				
				string paramName; Obj param; int numParams = 0;
				
				
				if (la.kind == 2) {
					Ident(out paramName);
					padStack(obj.paramCount);
					param = tab.Find(paramName);
					numParams += 1;
					gen.LoadLocalAddress(tab.curLevel-param.level, param.adr);
					addParamToStack(numParams);
					
					while (la.kind == 30) {
						Get();
						Ident(out paramName);
						param = tab.Find(paramName);
						numParams += 1;
						gen.LoadLocalAddress(tab.curLevel-param.level, param.adr);
						addParamToStack(numParams);
						
					}
				}
				if(numParams != obj.paramCount)
				 SemErr("Error: incorrect number of parameters");
				
				
				Expect(11);
				Expect(29);
				gen.Call(name);
				
			} else SynErr(53);
			break;
		}
		case 31: {
			Get();
			int l1, l2; l1 = 0; 
			Expr(out reg,
out type);
			if (type == boolean) {
			  l1 = gen.NewLabel();
			  gen.BranchFalse(l1);
			}
			else SemErr("boolean type expected");
			
			Stat();
			l2 = gen.NewLabel();
			gen.Branch(l2);
			gen.Label(l1);
			
			if (la.kind == 32) {
				Get();
				Stat();
			}
			gen.Label(l2); 
			break;
		}
		case 33: {
			Get();
			int l1, l2;
			l1 = gen.NewLabel();
			gen.Label(l1); l2=0;
			
			Expr(out reg,
out type);
			if (type == boolean) {
			  l2 = gen.NewLabel();
			  gen.BranchFalse(l2);
			}
			else SemErr("boolean type expected");
			
			Stat();
			gen.Branch(l1);
			gen.Label(l2);
			
			break;
		}
		case 34: {
			Get();
			Expect(10);
			int breakLabel, switchReg;  breakLabel = 0;
			breakLabel = gen.NewLabel();
			
			Expr(out switchReg, out type);
			Expect(11);
			Expect(18);
			while (la.kind == 35) {
				gen.GetRegister();
				Get();
				Expr(out reg,
out type);
				Expect(28);
				int l1, l2; l1 = 0;      //stuff for recognizing cases
				l1 = gen.NewLabel();
				gen.RelOp(Op.EQU, reg, switchReg);
				gen.BranchFalse(l1);
				
				Stat();
				if (la.kind == 36) {
					Get();
					gen.Branch(breakLabel);
				}
				gen.Label(l1); 
				
			}
			if (la.kind == 37) {
				Get();
				Expect(28);
				Stat();
			}
			Expect(19);
			gen.Label(breakLabel);
			
			break;
		}
		case 38: {
			Get();
			Expect(10);
			Stat();
			int loop, escape;
			loop = gen.NewLabel();
			gen.Label(loop); escape=0;
			
			Expr(out reg,
out type);
			Expect(29);
			if (type == boolean) {
			   escape = gen.NewLabel();
			  gen.BranchFalse(escape);
			}
			else SemErr("boolean type expected");
			
			Stat();
			Expect(11);
			Expect(39);
			Expect(18);
			Stat();
			Expect(19);
			gen.Branch(loop);
			gen.Label(escape);
			
			break;
		}
		case 40: {
			Get();
			index = 0;
			Ident(out name);
			if (la.kind == 6) {
				Get();
				Expect(1);
				index = Convert.ToInt32(t.val);
				
				Expect(7);
			}
			Expect(29);
			obj = tab.Find(name);
			if (obj.type == integer) {
			  gen.ReadInteger(); 
			  if (obj.level == 0)
			     gen.StoreGlobal(0, obj.adr + index, name);
			  else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr + index, name);
			}
			else SemErr("integer type expected");
			
			break;
		}
		case 41: {
			Get();
			string text; 
			if (StartOf(3)) {
				Expr(out reg,
out type);
				switch (type) {
				  case integer: gen.WriteInteger(reg, false);
				                break; 
				  case boolean: gen.WriteBoolean(false);
				                break;
				}
				
			} else if (la.kind == 3) {
				String(out text);
				gen.WriteString(text); 
			} else SynErr(54);
			Expect(29);
			break;
		}
		case 42: {
			Get();
			Expr(out reg,
out type);
			switch (type) {
			  case integer: gen.WriteInteger(reg, false);
			                break;
			  case boolean: gen.WriteBoolean(true);
			                break;
			}
			
			Expect(29);
			break;
		}
		case 18: {
			Get();
			while (StartOf(4)) {
				if (StartOf(2)) {
					Stat();
				} else {
					ValueCreation();
				}
			}
			Expect(19);
			break;
		}
		default: SynErr(55); break;
		}
	}

	void Term(out int reg,        // load value of Term into register
out int type) {
		int typeR, regR; Op op; 
		Primary(out reg,
out type);
		while (StartOf(5)) {
			MulOp(out op);
			Primary(out regR,
out typeR);
			if (type == integer && typeR == integer)
			  gen.MulOp(op, reg, regR);
			else SemErr("integer type expected");
			
		}
	}

	void Tastier() {
		string pName; 
		Expect(43);
		Ident(out pName);
		tab.OpenScope(); 
		Expect(18);
		while (la.kind == 44 || la.kind == 45 || la.kind == 46) {
			ValueCreation();
		}
		while (la.kind == 17) {
			ProcDecl(pName);
		}
		tab.CloseScope(); 
		Expect(19);
	}

	void Type(out int type) {
		type = undef; 
		if (la.kind == 44) {
			Get();
			type = integer; 
		} else if (la.kind == 45) {
			Get();
			type = boolean; 
		} else SynErr(56);
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		Tastier();
		Expect(0);

	}
	
	static readonly bool[,] set = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,T,T,T, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,T, x,T,T,x, x,x,T,x, T,T,T,x, x,x,x,x, x},
		{x,T,T,x, x,T,x,x, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,T, x,T,T,x, x,x,T,x, T,T,T,x, T,T,T,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, T,T,T,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x}

	};
} // end Parser


public class Errors {
	public int count = 0;                                    // number of errors detected
	public System.IO.TextWriter errorStream = Console.Out;   // error messages go to this stream
	public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text

	public virtual void SynErr (int line, int col, int n) {
		string s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "number expected"; break;
			case 2: s = "ident expected"; break;
			case 3: s = "string expected"; break;
			case 4: s = "\"+\" expected"; break;
			case 5: s = "\"-\" expected"; break;
			case 6: s = "\"[\" expected"; break;
			case 7: s = "\"]\" expected"; break;
			case 8: s = "\"true\" expected"; break;
			case 9: s = "\"false\" expected"; break;
			case 10: s = "\"(\" expected"; break;
			case 11: s = "\")\" expected"; break;
			case 12: s = "\"*\" expected"; break;
			case 13: s = "\"div\" expected"; break;
			case 14: s = "\"DIV\" expected"; break;
			case 15: s = "\"mod\" expected"; break;
			case 16: s = "\"MOD\" expected"; break;
			case 17: s = "\"void\" expected"; break;
			case 18: s = "\"{\" expected"; break;
			case 19: s = "\"}\" expected"; break;
			case 20: s = "\"=\" expected"; break;
			case 21: s = "\"<\" expected"; break;
			case 22: s = "\">\" expected"; break;
			case 23: s = "\"!=\" expected"; break;
			case 24: s = "\"<=\" expected"; break;
			case 25: s = "\">=\" expected"; break;
			case 26: s = "\":=\" expected"; break;
			case 27: s = "\"?\" expected"; break;
			case 28: s = "\":\" expected"; break;
			case 29: s = "\";\" expected"; break;
			case 30: s = "\",\" expected"; break;
			case 31: s = "\"if\" expected"; break;
			case 32: s = "\"else\" expected"; break;
			case 33: s = "\"while\" expected"; break;
			case 34: s = "\"switch\" expected"; break;
			case 35: s = "\"case\" expected"; break;
			case 36: s = "\"break;\" expected"; break;
			case 37: s = "\"default\" expected"; break;
			case 38: s = "\"for\" expected"; break;
			case 39: s = "\"do\" expected"; break;
			case 40: s = "\"read\" expected"; break;
			case 41: s = "\"write\" expected"; break;
			case 42: s = "\"writeln\" expected"; break;
			case 43: s = "\"program\" expected"; break;
			case 44: s = "\"int\" expected"; break;
			case 45: s = "\"bool\" expected"; break;
			case 46: s = "\"constant\" expected"; break;
			case 47: s = "??? expected"; break;
			case 48: s = "invalid AddOp"; break;
			case 49: s = "invalid RelOp"; break;
			case 50: s = "invalid Primary"; break;
			case 51: s = "invalid MulOp"; break;
			case 52: s = "invalid Stat"; break;
			case 53: s = "invalid Stat"; break;
			case 54: s = "invalid Stat"; break;
			case 55: s = "invalid Stat"; break;
			case 56: s = "invalid Type"; break;

			default: s = "error " + n; break;
		}
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public virtual void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public virtual void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public virtual void Warning(string s) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}
}